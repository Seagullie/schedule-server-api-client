/* tslint:disable */
/* eslint-disable */
/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticatedResponse
 */
export interface AuthenticatedResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClassType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ClassType = typeof ClassType[keyof typeof ClassType];


/**
 * 
 * @export
 * @enum {string}
 */

export const DayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface FullContextForReadDto
 */
export interface FullContextForReadDto {
    /**
     * 
     * @type {StudentsGroupForReadDto}
     * @memberof FullContextForReadDto
     */
    'studentsGroup'?: StudentsGroupForReadDto;
    /**
     * 
     * @type {TimeContextForReadDto}
     * @memberof FullContextForReadDto
     */
    'timeContext'?: TimeContextForReadDto;
}
/**
 * 
 * @export
 * @interface FullContextForWriteDto
 */
export interface FullContextForWriteDto {
    /**
     * 
     * @type {number}
     * @memberof FullContextForWriteDto
     */
    'studentsGroupId'?: number;
    /**
     * 
     * @type {TimeContextForWriteDto}
     * @memberof FullContextForWriteDto
     */
    'timeContext'?: TimeContextForWriteDto;
}
/**
 * 
 * @export
 * @interface FullContextJunction
 */
export interface FullContextJunction {
    /**
     * 
     * @type {number}
     * @memberof FullContextJunction
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContextJunction
     */
    'studentsGroupId'?: number;
    /**
     * 
     * @type {number}
     * @memberof FullContextJunction
     */
    'timeContextId'?: number;
    /**
     * 
     * @type {StudentsGroup}
     * @memberof FullContextJunction
     */
    'studentsGroup': StudentsGroup;
    /**
     * 
     * @type {TimeContext}
     * @memberof FullContextJunction
     */
    'timeContext': TimeContext;
}
/**
 * 
 * @export
 * @interface Lesson
 */
export interface Lesson {
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'id'?: number;
    /**
     * 
     * @type {ClassType}
     * @memberof Lesson
     */
    'classType'?: ClassType;
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'subjectId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'teacherId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Lesson
     */
    'roomId'?: number | null;
    /**
     * 
     * @type {Subject}
     * @memberof Lesson
     */
    'subject': Subject;
    /**
     * 
     * @type {Teacher}
     * @memberof Lesson
     */
    'teacher'?: Teacher;
    /**
     * 
     * @type {Room}
     * @memberof Lesson
     */
    'room'?: Room;
}


/**
 * 
 * @export
 * @interface LessonForReadDto
 */
export interface LessonForReadDto {
    /**
     * 
     * @type {number}
     * @memberof LessonForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {Subject}
     * @memberof LessonForReadDto
     */
    'subject'?: Subject;
    /**
     * 
     * @type {TeacherForReadDto}
     * @memberof LessonForReadDto
     */
    'teacher'?: TeacherForReadDto;
    /**
     * 
     * @type {RoomForReadDto}
     * @memberof LessonForReadDto
     */
    'room'?: RoomForReadDto;
    /**
     * 
     * @type {string}
     * @memberof LessonForReadDto
     */
    'classType'?: string | null;
}
/**
 * 
 * @export
 * @interface LessonForWriteDto
 */
export interface LessonForWriteDto {
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'subjectId'?: number;
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'teacherId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'roomId'?: number | null;
    /**
     * 
     * @type {ClassType}
     * @memberof LessonForWriteDto
     */
    'classType'?: ClassType;
}


/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    'lessonId'?: number | null;
    /**
     * 
     * @type {Array<Lesson>}
     * @memberof Room
     */
    'lesson'?: Array<Lesson> | null;
}
/**
 * 
 * @export
 * @interface RoomForReadDto
 */
export interface RoomForReadDto {
    /**
     * 
     * @type {number}
     * @memberof RoomForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomForReadDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface RoomForWriteDto
 */
export interface RoomForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof RoomForWriteDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleLessonForReadDto
 */
export interface ScheduleLessonForReadDto {
    /**
     * 
     * @type {number}
     * @memberof ScheduleLessonForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {LessonForReadDto}
     * @memberof ScheduleLessonForReadDto
     */
    'lesson'?: LessonForReadDto;
    /**
     * 
     * @type {FullContextForReadDto}
     * @memberof ScheduleLessonForReadDto
     */
    'fullContext'?: FullContextForReadDto;
}
/**
 * 
 * @export
 * @interface ScheduleLessonForWriteDto
 */
export interface ScheduleLessonForWriteDto {
    /**
     * 
     * @type {number}
     * @memberof ScheduleLessonForWriteDto
     */
    'lessonId'?: number;
    /**
     * 
     * @type {FullContextForWriteDto}
     * @memberof ScheduleLessonForWriteDto
     */
    'fullContext'?: FullContextForWriteDto;
}
/**
 * 
 * @export
 * @interface ScheduleLessonJunction
 */
export interface ScheduleLessonJunction {
    /**
     * 
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'lessonId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'fullContextId'?: number;
    /**
     * 
     * @type {Lesson}
     * @memberof ScheduleLessonJunction
     */
    'lesson': Lesson;
    /**
     * 
     * @type {FullContextJunction}
     * @memberof ScheduleLessonJunction
     */
    'fullContext': FullContextJunction;
}
/**
 * 
 * @export
 * @interface StudentsGroup
 */
export interface StudentsGroup {
    /**
     * 
     * @type {number}
     * @memberof StudentsGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentsGroup
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<FullContextJunction>}
     * @memberof StudentsGroup
     */
    'fullContexts'?: Array<FullContextJunction> | null;
}
/**
 * 
 * @export
 * @interface StudentsGroupForReadDto
 */
export interface StudentsGroupForReadDto {
    /**
     * 
     * @type {number}
     * @memberof StudentsGroupForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentsGroupForReadDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface StudentsGroupForWriteDto
 */
export interface StudentsGroupForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof StudentsGroupForWriteDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'qualifications'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'departmentId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'lessonId'?: number | null;
    /**
     * 
     * @type {Department}
     * @memberof Teacher
     */
    'department'?: Department;
    /**
     * 
     * @type {Array<Lesson>}
     * @memberof Teacher
     */
    'lesson'?: Array<Lesson> | null;
}
/**
 * 
 * @export
 * @interface TeacherDepartmentForReadDto
 */
export interface TeacherDepartmentForReadDto {
    /**
     * 
     * @type {number}
     * @memberof TeacherDepartmentForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface TeacherDepartmentForWriteDto
 */
export interface TeacherDepartmentForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface TeacherForReadDto
 */
export interface TeacherForReadDto {
    /**
     * 
     * @type {number}
     * @memberof TeacherForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'qualifications'?: string | null;
    /**
     * 
     * @type {TeacherDepartmentForReadDto}
     * @memberof TeacherForReadDto
     */
    'department'?: TeacherDepartmentForReadDto;
}
/**
 * 
 * @export
 * @interface TeacherForWriteDto
 */
export interface TeacherForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'qualifications'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TeacherForWriteDto
     */
    'departmentId'?: number | null;
}
/**
 * 
 * @export
 * @interface TimeContext
 */
export interface TimeContext {
    /**
     * 
     * @type {number}
     * @memberof TimeContext
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeContext
     */
    'lessonIndex'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof TimeContext
     */
    'weekDay'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof TimeContext
     */
    'weekIndex'?: number;
}


/**
 * 
 * @export
 * @interface TimeContextForReadDto
 */
export interface TimeContextForReadDto {
    /**
     * 
     * @type {number}
     * @memberof TimeContextForReadDto
     */
    'lessonIndex'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof TimeContextForReadDto
     */
    'weekDay'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof TimeContextForReadDto
     */
    'weekIndex'?: number;
}


/**
 * 
 * @export
 * @interface TimeContextForWriteDto
 */
export interface TimeContextForWriteDto {
    /**
     * 
     * @type {number}
     * @memberof TimeContextForWriteDto
     */
    'lessonIndex'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof TimeContextForWriteDto
     */
    'weekDay'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof TimeContextForWriteDto
     */
    'weekIndex'?: number;
}


/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface UserForLoginDto
 */
export interface UserForLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserForLoginDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForLoginDto
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface UserForReadDto
 */
export interface UserForReadDto {
    /**
     * 
     * @type {string}
     * @memberof UserForReadDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof UserForReadDto
     */
    'userRole'?: UserRole;
}


/**
 * 
 * @export
 * @interface UserForRegisterDto
 */
export interface UserForRegisterDto {
    /**
     * 
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'password'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof UserForRegisterDto
     */
    'userRole'?: UserRole;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const UserRole = {
    NUMBER_0: 0
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (userForLoginDto?: UserForLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Token} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost: async (token?: Token, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (userForRegisterDto?: UserForRegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForRegisterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(userForLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Token} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRefreshTokenPost(token?: Token, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRefreshTokenPost(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(userForRegisterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<AuthenticatedResponse> {
            return localVarFp.apiAuthLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Token} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost(token?: Token, options?: any): AxiosPromise<string> {
            return localVarFp.apiAuthRefreshTokenPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: any): AxiosPromise<UserForReadDto> {
            return localVarFp.apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutDelete(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Token} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRefreshTokenPost(token?: Token, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRefreshTokenPost(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserForRegisterDto} [userForRegisterDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LessonApi - axios parameter creator
 * @export
 */
export const LessonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a list of lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a lesson.
         * @param {number} id 
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonIdPut: async (id: number, lessonForWriteDto?: LessonForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLessonIdPut', 'id', id)
            const localVarPath = `/api/Lesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lessonForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a lesson.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdDelete: async (lessonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('apiLessonLessonIdDelete', 'lessonId', lessonId)
            const localVarPath = `/api/Lesson/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdGet: async (lessonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('apiLessonLessonIdGet', 'lessonId', lessonId)
            const localVarPath = `/api/Lesson/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonPost: async (lessonForWriteDto?: LessonForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lessonForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LessonApi - functional programming interface
 * @export
 */
export const LessonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a list of lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LessonForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a lesson.
         * @param {number} id 
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonIdPut(id, lessonForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a lesson.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonLessonIdDelete(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonLessonIdDelete(lessonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonLessonIdGet(lessonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLessonPost(lessonForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LessonApi - factory interface
 * @export
 */
export const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LessonApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiLessonDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a list of lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<LessonForReadDto>> {
            return localVarFp.apiLessonGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a lesson.
         * @param {number} id 
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: any): AxiosPromise<LessonForReadDto> {
            return localVarFp.apiLessonIdPut(id, lessonForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a lesson.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdDelete(lessonId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiLessonLessonIdDelete(lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdGet(lessonId: number, options?: any): AxiosPromise<LessonForReadDto> {
            return localVarFp.apiLessonLessonIdGet(lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: any): AxiosPromise<LessonForReadDto> {
            return localVarFp.apiLessonPost(lessonForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export class LessonApi extends BaseAPI {
    /**
     * 
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonDelete(options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a list of lessons.
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a lesson.
     * @param {number} id 
     * @param {LessonForWriteDto} [lessonForWriteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonIdPut(id, lessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a lesson.
     * @param {number} lessonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonLessonIdDelete(lessonId: number, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonLessonIdDelete(lessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonLessonIdGet(lessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).apiLessonPost(lessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a list of rooms.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdDelete', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdGet', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut: async (id: number, roomForWriteDto?: RoomForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdPut', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost: async (roomForWriteDto?: RoomForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves a list of rooms.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdPut(id, roomForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomPost(roomForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves a list of rooms.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<Room>> {
            return localVarFp.apiRoomGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiRoomIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id: number, options?: any): AxiosPromise<Room> {
            return localVarFp.apiRoomIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<Room> {
            return localVarFp.apiRoomPost(roomForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a list of rooms.
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdDelete(id: number, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdGet(id: number, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomPost(roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleLessonApi - axios parameter creator
 * @export
 */
export const ScheduleLessonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id 
         * @param {number} [scheduleLessonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdDelete: async (id: string, scheduleLessonId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiScheduleLessonIdDelete', 'id', id)
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (scheduleLessonId !== undefined) {
                localVarQueryParameter['scheduleLessonId'] = scheduleLessonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiScheduleLessonIdGet', 'id', id)
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing schedule lesson
         * @param {number} id 
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdPut: async (id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiScheduleLessonIdPut', 'id', id)
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleLessonForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonPost: async (scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleLessonForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleLessonApi - functional programming interface
 * @export
 */
export const ScheduleLessonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleLessonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id 
         * @param {number} [scheduleLessonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonIdDelete(id, scheduleLessonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing schedule lesson
         * @param {number} id 
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonJunction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonJunction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleLessonPost(scheduleLessonForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleLessonApi - factory interface
 * @export
 */
export const ScheduleLessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleLessonApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiScheduleLessonDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<ScheduleLessonForReadDto> {
            return localVarFp.apiScheduleLessonGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id 
         * @param {number} [scheduleLessonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiScheduleLessonIdDelete(id, scheduleLessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdGet(id: number, options?: any): AxiosPromise<ScheduleLessonForReadDto> {
            return localVarFp.apiScheduleLessonIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing schedule lesson
         * @param {number} id 
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: any): AxiosPromise<ScheduleLessonJunction> {
            return localVarFp.apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: any): AxiosPromise<ScheduleLessonJunction> {
            return localVarFp.apiScheduleLessonPost(scheduleLessonForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleLessonApi - object-oriented interface
 * @export
 * @class ScheduleLessonApi
 * @extends {BaseAPI}
 */
export class ScheduleLessonApi extends BaseAPI {
    /**
     * 
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonDelete(options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id 
     * @param {number} [scheduleLessonId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonIdDelete(id, scheduleLessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonIdGet(id: number, options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing schedule lesson
     * @param {number} id 
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    public apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig) {
        return ScheduleLessonApiFp(this.configuration).apiScheduleLessonPost(scheduleLessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
export const StudentsGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a list of students groups.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdDelete', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdGet', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut: async (id: number, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdPut', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost: async (studentsGroupForWriteDto?: StudentsGroupForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studentsGroupForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
export const StudentsGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a list of students groups.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentsGroupForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupPost(studentsGroupForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentsGroupApi - factory interface
 * @export
 */
export const StudentsGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiStudentsGroupDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a list of students groups.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<StudentsGroupForReadDto>> {
            return localVarFp.apiStudentsGroupGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStudentsGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id: number, options?: any): AxiosPromise<StudentsGroupForReadDto> {
            return localVarFp.apiStudentsGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiStudentsGroupIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: any): AxiosPromise<StudentsGroupForReadDto> {
            return localVarFp.apiStudentsGroupPost(studentsGroupForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
export class StudentsGroupApi extends BaseAPI {
    /**
     * 
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupDelete(options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a list of students groups.
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupPost(studentsGroupForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectApi - axios parameter creator
 * @export
 */
export const SubjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdDelete', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdGet', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut: async (id: number, subject?: Subject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdPut', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost: async (subject?: Subject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectApi - functional programming interface
 * @export
 */
export const SubjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdPut(id: number, subject?: Subject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdPut(id, subject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectPost(subject?: Subject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectPost(subject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectApi - factory interface
 * @export
 */
export const SubjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<Subject>> {
            return localVarFp.apiSubjectGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubjectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id: number, options?: any): AxiosPromise<Subject> {
            return localVarFp.apiSubjectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id: number, subject?: Subject, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubjectIdPut(id, subject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(subject?: Subject, options?: any): AxiosPromise<Subject> {
            return localVarFp.apiSubjectPost(subject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export class SubjectApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all subjects
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdDelete(id: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdGet(id: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdPut(id: number, subject?: Subject, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdPut(id, subject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectPost(subject?: Subject, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectPost(subject, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a list of teachers.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet: async (range?: string, sort?: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdDelete', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdGet', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut: async (id: number, teacherForWriteDto?: TeacherForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdPut', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost: async (teacherForWriteDto?: TeacherForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a list of teachers.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeacherForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherGet(range, sort, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdPut(id, teacherForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherPost(teacherForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a list of teachers.
         * @param {string} [range] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<TeacherForReadDto>> {
            return localVarFp.apiTeacherGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id: number, options?: any): AxiosPromise<Teacher> {
            return localVarFp.apiTeacherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<Teacher> {
            return localVarFp.apiTeacherPost(teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     * 
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherDelete(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a list of teachers.
     * @param {string} [range] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdDelete(id: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdGet(id: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherPost(teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherDepartmentApi - axios parameter creator
 * @export
 */
export const TeacherDepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherDepartmentIdDelete', 'id', id)
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherDepartmentIdGet', 'id', id)
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdPut: async (id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherDepartmentIdPut', 'id', id)
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDepartmentForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentPost: async (teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDepartmentForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherDepartmentApi - functional programming interface
 * @export
 */
export const TeacherDepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherDepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherDepartmentApi - factory interface
 * @export
 */
export const TeacherDepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherDepartmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherDepartmentDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentGet(options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.apiTeacherDepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherDepartmentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdGet(id: number, options?: any): AxiosPromise<Department> {
            return localVarFp.apiTeacherDepartmentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: any): AxiosPromise<Department> {
            return localVarFp.apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherDepartmentApi - object-oriented interface
 * @export
 * @class TeacherDepartmentApi
 * @extends {BaseAPI}
 */
export class TeacherDepartmentApi extends BaseAPI {
    /**
     * 
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentDelete(options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentGet(options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentIdDelete(id: number, options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentIdGet(id: number, options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    public apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig) {
        return TeacherDepartmentApiFp(this.configuration).apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



