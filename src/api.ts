/* tslint:disable */
/* eslint-disable */
/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    'published'?: string;
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    'authorId'?: number;
    /**
     * 
     * @type {Author}
     * @memberof Article
     */
    'author'?: Author;
}
/**
 * 
 * @export
 * @interface ArticleForReadDto
 */
export interface ArticleForReadDto {
    /**
     * 
     * @type {number}
     * @memberof ArticleForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleForReadDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArticleForReadDto
     */
    'published'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleForReadDto
     */
    'authorId'?: number;
}
/**
 * 
 * @export
 * @interface ArticleForWriteDto
 */
export interface ArticleForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof ArticleForWriteDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ArticleForWriteDto
     */
    'body': string;
    /**
     * 
     * @type {number}
     * @memberof ArticleForWriteDto
     */
    'authorId'?: number;
}
/**
 * 
 * @export
 * @interface AuthenticatedResponse
 */
export interface AuthenticatedResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'nickName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'bio'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthorForReadDto
 */
export interface AuthorForReadDto {
    /**
     * 
     * @type {number}
     * @memberof AuthorForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'nickName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthorForWriteDto
 */
export interface AuthorForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'nickName': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'bio': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ClassType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ClassType = typeof ClassType[keyof typeof ClassType];


/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {number}
     * @memberof Department
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface DepartmentForWriteDto
 */
export interface DepartmentForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'link'?: string | null;
}
/**
 * 
 * @export
 * @interface LessonForReadDto
 */
export interface LessonForReadDto {
    /**
     * 
     * @type {number}
     * @memberof LessonForReadDto
     */
    'sequence'?: number;
    /**
     * 
     * @type {string}
     * @memberof LessonForReadDto
     */
    'subject'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LessonForReadDto
     */
    'teacher'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LessonForReadDto
     */
    'room'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LessonForReadDto
     */
    'classType'?: string | null;
}
/**
 * 
 * @export
 * @interface LessonForWriteDto
 */
export interface LessonForWriteDto {
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'sequence'?: number;
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'subjectId'?: number;
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'teacherId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'roomId'?: number | null;
    /**
     * 
     * @type {ClassType}
     * @memberof LessonForWriteDto
     */
    'classType'?: ClassType;
}


/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface RoomForWriteDto
 */
export interface RoomForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof RoomForWriteDto
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface StudentsGroupForReadDto
 */
export interface StudentsGroupForReadDto {
    /**
     * 
     * @type {number}
     * @memberof StudentsGroupForReadDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentsGroupForReadDto
     */
    'groupName'?: string | null;
}
/**
 * 
 * @export
 * @interface StudentsGroupForWriteDto
 */
export interface StudentsGroupForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof StudentsGroupForWriteDto
     */
    'groupName'?: string | null;
    /**
     * 
     * @type {WeekScheduleForReadDto}
     * @memberof StudentsGroupForWriteDto
     */
    'firstWeekSchedule'?: WeekScheduleForReadDto;
    /**
     * 
     * @type {WeekScheduleForReadDto}
     * @memberof StudentsGroupForWriteDto
     */
    'secondWeekSchedule'?: WeekScheduleForReadDto;
}
/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     * 
     * @type {number}
     * @memberof Teacher
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'qualifications'?: string | null;
    /**
     * 
     * @type {Department}
     * @memberof Teacher
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface TeacherForWriteDto
 */
export interface TeacherForWriteDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'middleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'qualifications'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TeacherForWriteDto
     */
    'departmentId'?: number | null;
}
/**
 * 
 * @export
 * @interface UserForLoginDto
 */
export interface UserForLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserForLoginDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForLoginDto
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface UserForReadDto
 */
export interface UserForReadDto {
    /**
     * 
     * @type {string}
     * @memberof UserForReadDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof UserForReadDto
     */
    'userRole'?: UserRole;
}


/**
 * 
 * @export
 * @interface UserForRegisterDto
 */
export interface UserForRegisterDto {
    /**
     * 
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'password'?: string | null;
    /**
     * 
     * @type {UserRole}
     * @memberof UserForRegisterDto
     */
    'userRole'?: UserRole;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const UserRole = {
    NUMBER_0: 0
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];


/**
 * 
 * @export
 * @interface WeekScheduleForReadDto
 */
export interface WeekScheduleForReadDto {
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'sunday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'monday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'tuesday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'wednesday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'thursday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'friday'?: Array<LessonForReadDto> | null;
    /**
     * 
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'saturday'?: Array<LessonForReadDto> | null;
}
/**
 * 
 * @export
 * @interface WeekScheduleForWriteDto
 */
export interface WeekScheduleForWriteDto {
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'sunday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'monday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'tuesday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'wednesday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'thursday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'friday'?: Array<LessonForWriteDto> | null;
    /**
     * 
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'saturday'?: Array<LessonForWriteDto> | null;
}

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiArticleIdDelete', 'id', id)
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiArticleIdGet', 'id', id)
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdPut: async (id: number, articleForWriteDto?: ArticleForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiArticleIdPut', 'id', id)
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlePost: async (articleForWriteDto?: ArticleForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(articleForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticleIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticleIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticleIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticleIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticleIdPut(id, articleForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiArticlePost(articleForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleGet(options?: any): AxiosPromise<Array<ArticleForReadDto>> {
            return localVarFp.apiArticleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticleIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdGet(id: number, options?: any): AxiosPromise<Article> {
            return localVarFp.apiArticleIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiArticleIdPut(id, articleForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: any): AxiosPromise<Article> {
            return localVarFp.apiArticlePost(articleForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticleGet(options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticleIdDelete(id: number, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticleIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticleIdGet(id: number, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticleIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticleIdPut(id, articleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig) {
        return ArticleApiFp(this.configuration).apiArticlePost(articleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (userForLoginDto?: UserForLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (userForRegisterDto?: UserForRegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForRegisterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(userForLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRefreshTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRefreshTokenGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(userForRegisterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {UserForLoginDto} [userForLoginDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<AuthenticatedResponse> {
            return localVarFp.apiAuthLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiAuthRefreshTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserForRegisterDto} [userForRegisterDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: any): AxiosPromise<UserForReadDto> {
            return localVarFp.apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {UserForLoginDto} [userForLoginDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutDelete(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRefreshTokenGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRefreshTokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserForRegisterDto} [userForRegisterDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorApi - axios parameter creator
 * @export
 */
export const AuthorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuthorIdDelete', 'id', id)
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuthorIdGet', 'id', id)
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdPut: async (id: number, authorForWriteDto?: AuthorForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAuthorIdPut', 'id', id)
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorPost: async (authorForWriteDto?: AuthorForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorApi - functional programming interface
 * @export
 */
export const AuthorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorIdPut(id, authorForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorPost(authorForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorApi - factory interface
 * @export
 */
export const AuthorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorGet(options?: any): AxiosPromise<Array<AuthorForReadDto>> {
            return localVarFp.apiAuthorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthorIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdGet(id: number, options?: any): AxiosPromise<Author> {
            return localVarFp.apiAuthorIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthorIdPut(id, authorForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: any): AxiosPromise<Author> {
            return localVarFp.apiAuthorPost(authorForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
export class AuthorApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public apiAuthorGet(options?: AxiosRequestConfig) {
        return AuthorApiFp(this.configuration).apiAuthorGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public apiAuthorIdDelete(id: number, options?: AxiosRequestConfig) {
        return AuthorApiFp(this.configuration).apiAuthorIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public apiAuthorIdGet(id: number, options?: AxiosRequestConfig) {
        return AuthorApiFp(this.configuration).apiAuthorIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig) {
        return AuthorApiFp(this.configuration).apiAuthorIdPut(id, authorForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig) {
        return AuthorApiFp(this.configuration).apiAuthorPost(authorForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export const DepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDepartmentIdDelete', 'id', id)
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDepartmentIdGet', 'id', id)
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdPut: async (id: number, departmentForWriteDto?: DepartmentForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDepartmentIdPut', 'id', id)
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentPost: async (departmentForWriteDto?: DepartmentForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentApi - functional programming interface
 * @export
 */
export const DepartmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentIdPut(id, departmentForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDepartmentPost(departmentForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentApi - factory interface
 * @export
 */
export const DepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGet(options?: any): AxiosPromise<Array<Department>> {
            return localVarFp.apiDepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiDepartmentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdGet(id: number, options?: any): AxiosPromise<Department> {
            return localVarFp.apiDepartmentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiDepartmentIdPut(id, departmentForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: any): AxiosPromise<Department> {
            return localVarFp.apiDepartmentPost(departmentForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export class DepartmentApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentGet(options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentIdDelete(id: number, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentIdGet(id: number, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentIdPut(id, departmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig) {
        return DepartmentApiFp(this.configuration).apiDepartmentPost(departmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdDelete', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdGet', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut: async (id: number, roomForWriteDto?: RoomForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRoomIdPut', 'id', id)
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost: async (roomForWriteDto?: RoomForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomIdPut(id, roomForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomPost(roomForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(options?: any): AxiosPromise<Array<Room>> {
            return localVarFp.apiRoomGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiRoomIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id: number, options?: any): AxiosPromise<Room> {
            return localVarFp.apiRoomIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<Room> {
            return localVarFp.apiRoomPost(roomForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomGet(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdDelete(id: number, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdGet(id: number, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).apiRoomPost(roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleDelete: async (studentsGroupId?: number, isSecondWeek?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentsGroupId !== undefined) {
                localVarQueryParameter['studentsGroupId'] = studentsGroupId;
            }

            if (isSecondWeek !== undefined) {
                localVarQueryParameter['isSecondWeek'] = isSecondWeek;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulePost: async (studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (studentsGroupId !== undefined) {
                localVarQueryParameter['studentsGroupId'] = studentsGroupId;
            }

            if (isSecondWeek !== undefined) {
                localVarQueryParameter['isSecondWeek'] = isSecondWeek;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(weekScheduleForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleStudentsGroupIdGet: async (studentsGroupId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentsGroupId' is not null or undefined
            assertParamExists('apiScheduleStudentsGroupIdGet', 'studentsGroupId', studentsGroupId)
            const localVarPath = `/api/Schedule/{studentsGroupId}`
                .replace(`{${"studentsGroupId"}}`, encodeURIComponent(String(studentsGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleDelete(studentsGroupId, isSecondWeek, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeekScheduleForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForWriteDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleStudentsGroupIdGet(studentsGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiScheduleDelete(studentsGroupId, isSecondWeek, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: any): AxiosPromise<WeekScheduleForReadDto> {
            return localVarFp.apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: any): AxiosPromise<StudentsGroupForWriteDto> {
            return localVarFp.apiScheduleStudentsGroupIdGet(studentsGroupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).apiScheduleDelete(studentsGroupId, isSecondWeek, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).apiScheduleStudentsGroupIdGet(studentsGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
export const StudentsGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdDelete', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdGet', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut: async (id: number, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiStudentsGroupIdPut', 'id', id)
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
export const StudentsGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentsGroupForReadDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStudentsGroupPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStudentsGroupPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentsGroupApi - factory interface
 * @export
 */
export const StudentsGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(options?: any): AxiosPromise<Array<StudentsGroupForReadDto>> {
            return localVarFp.apiStudentsGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiStudentsGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id: number, options?: any): AxiosPromise<StudentsGroupForReadDto> {
            return localVarFp.apiStudentsGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiStudentsGroupIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(body?: string, options?: any): AxiosPromise<StudentsGroupForReadDto> {
            return localVarFp.apiStudentsGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
export class StudentsGroupApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupGet(options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    public apiStudentsGroupPost(body?: string, options?: AxiosRequestConfig) {
        return StudentsGroupApiFp(this.configuration).apiStudentsGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectApi - axios parameter creator
 * @export
 */
export const SubjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdDelete', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdGet', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut: async (id: number, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSubjectIdPut', 'id', id)
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectApi - functional programming interface
 * @export
 */
export const SubjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectIdPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSubjectPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSubjectPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectApi - factory interface
 * @export
 */
export const SubjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(options?: any): AxiosPromise<Array<Subject>> {
            return localVarFp.apiSubjectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubjectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id: number, options?: any): AxiosPromise<Subject> {
            return localVarFp.apiSubjectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSubjectIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(body?: string, options?: any): AxiosPromise<Subject> {
            return localVarFp.apiSubjectPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export class SubjectApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectGet(options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdDelete(id: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdGet(id: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectIdPut(id: number, body?: string, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public apiSubjectPost(body?: string, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).apiSubjectPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdDelete', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdGet', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut: async (id: number, teacherForWriteDto?: TeacherForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeacherIdPut', 'id', id)
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost: async (teacherForWriteDto?: TeacherForWriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherForWriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherIdPut(id, teacherForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeacherPost(teacherForWriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(options?: any): AxiosPromise<Array<Teacher>> {
            return localVarFp.apiTeacherGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id: number, options?: any): AxiosPromise<Teacher> {
            return localVarFp.apiTeacherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<Teacher> {
            return localVarFp.apiTeacherPost(teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherGet(options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdDelete(id: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdGet(id: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).apiTeacherPost(teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



