/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthenticatedResponse
 */
export interface AuthenticatedResponse {
    /**
     *
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'accessToken'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'refreshToken'?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ClassType: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export type ClassType = typeof ClassType[keyof typeof ClassType];
/**
 *
 * @export
 * @enum {string}
 */
export declare const DayOfWeek: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
    readonly NUMBER_3: 3;
    readonly NUMBER_4: 4;
    readonly NUMBER_5: 5;
    readonly NUMBER_6: 6;
};
export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];
/**
 *
 * @export
 * @interface Department
 */
export interface Department {
    /**
     *
     * @type {number}
     * @memberof Department
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'abbreviation'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'link'?: string | null;
}
/**
 *
 * @export
 * @interface FullContextForReadDto
 */
export interface FullContextForReadDto {
    /**
     *
     * @type {StudentsGroupForReadDto}
     * @memberof FullContextForReadDto
     */
    'studentsGroup'?: StudentsGroupForReadDto;
    /**
     *
     * @type {TimeContextForReadDto}
     * @memberof FullContextForReadDto
     */
    'timeContext'?: TimeContextForReadDto;
}
/**
 *
 * @export
 * @interface FullContextForWriteDto
 */
export interface FullContextForWriteDto {
    /**
     *
     * @type {number}
     * @memberof FullContextForWriteDto
     */
    'studentsGroupId'?: number;
    /**
     *
     * @type {TimeContextForWriteDto}
     * @memberof FullContextForWriteDto
     */
    'timeContext'?: TimeContextForWriteDto;
}
/**
 *
 * @export
 * @interface FullContextJunction
 */
export interface FullContextJunction {
    /**
     *
     * @type {number}
     * @memberof FullContextJunction
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof FullContextJunction
     */
    'studentsGroupId'?: number;
    /**
     *
     * @type {number}
     * @memberof FullContextJunction
     */
    'timeContextId'?: number;
    /**
     *
     * @type {StudentsGroup}
     * @memberof FullContextJunction
     */
    'studentsGroup': StudentsGroup;
    /**
     *
     * @type {TimeContext}
     * @memberof FullContextJunction
     */
    'timeContext': TimeContext;
}
/**
 *
 * @export
 * @interface Lesson
 */
export interface Lesson {
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'id'?: number;
    /**
     *
     * @type {ClassType}
     * @memberof Lesson
     */
    'classType'?: ClassType;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'subjectId'?: number;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'teacherId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'roomId'?: number | null;
    /**
     *
     * @type {Subject}
     * @memberof Lesson
     */
    'subject': Subject;
    /**
     *
     * @type {Teacher}
     * @memberof Lesson
     */
    'teacher'?: Teacher;
    /**
     *
     * @type {Room}
     * @memberof Lesson
     */
    'room'?: Room;
}
/**
 *
 * @export
 * @interface LessonForReadDto
 */
export interface LessonForReadDto {
    /**
     *
     * @type {number}
     * @memberof LessonForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {Subject}
     * @memberof LessonForReadDto
     */
    'subject'?: Subject;
    /**
     *
     * @type {TeacherForReadDto}
     * @memberof LessonForReadDto
     */
    'teacher'?: TeacherForReadDto;
    /**
     *
     * @type {RoomForReadDto}
     * @memberof LessonForReadDto
     */
    'room'?: RoomForReadDto;
    /**
     *
     * @type {string}
     * @memberof LessonForReadDto
     */
    'classType'?: string | null;
}
/**
 *
 * @export
 * @interface LessonForWriteDto
 */
export interface LessonForWriteDto {
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'subjectId'?: number;
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'teacherId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'roomId'?: number | null;
    /**
     *
     * @type {ClassType}
     * @memberof LessonForWriteDto
     */
    'classType'?: ClassType;
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     *
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 *
 * @export
 * @interface Room
 */
export interface Room {
    /**
     *
     * @type {number}
     * @memberof Room
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Room
     */
    'name'?: string | null;
    /**
     *
     * @type {number}
     * @memberof Room
     */
    'lessonId'?: number | null;
    /**
     *
     * @type {Array<Lesson>}
     * @memberof Room
     */
    'lesson'?: Array<Lesson> | null;
}
/**
 *
 * @export
 * @interface RoomForReadDto
 */
export interface RoomForReadDto {
    /**
     *
     * @type {number}
     * @memberof RoomForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof RoomForReadDto
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface RoomForWriteDto
 */
export interface RoomForWriteDto {
    /**
     *
     * @type {string}
     * @memberof RoomForWriteDto
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface ScheduleLessonForReadDto
 */
export interface ScheduleLessonForReadDto {
    /**
     *
     * @type {number}
     * @memberof ScheduleLessonForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {LessonForReadDto}
     * @memberof ScheduleLessonForReadDto
     */
    'lesson'?: LessonForReadDto;
    /**
     *
     * @type {FullContextForReadDto}
     * @memberof ScheduleLessonForReadDto
     */
    'fullContext'?: FullContextForReadDto;
}
/**
 *
 * @export
 * @interface ScheduleLessonForWriteDto
 */
export interface ScheduleLessonForWriteDto {
    /**
     *
     * @type {number}
     * @memberof ScheduleLessonForWriteDto
     */
    'lessonId'?: number;
    /**
     *
     * @type {FullContextForWriteDto}
     * @memberof ScheduleLessonForWriteDto
     */
    'fullContext'?: FullContextForWriteDto;
}
/**
 *
 * @export
 * @interface ScheduleLessonJunction
 */
export interface ScheduleLessonJunction {
    /**
     *
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'lessonId'?: number;
    /**
     *
     * @type {number}
     * @memberof ScheduleLessonJunction
     */
    'fullContextId'?: number;
    /**
     *
     * @type {Lesson}
     * @memberof ScheduleLessonJunction
     */
    'lesson': Lesson;
    /**
     *
     * @type {FullContextJunction}
     * @memberof ScheduleLessonJunction
     */
    'fullContext': FullContextJunction;
}
/**
 *
 * @export
 * @interface StudentsGroup
 */
export interface StudentsGroup {
    /**
     *
     * @type {number}
     * @memberof StudentsGroup
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof StudentsGroup
     */
    'name'?: string | null;
    /**
     *
     * @type {Array<FullContextJunction>}
     * @memberof StudentsGroup
     */
    'fullContexts'?: Array<FullContextJunction> | null;
}
/**
 *
 * @export
 * @interface StudentsGroupForReadDto
 */
export interface StudentsGroupForReadDto {
    /**
     *
     * @type {number}
     * @memberof StudentsGroupForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof StudentsGroupForReadDto
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface StudentsGroupForWriteDto
 */
export interface StudentsGroupForWriteDto {
    /**
     *
     * @type {string}
     * @memberof StudentsGroupForWriteDto
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     *
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Subject
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     *
     * @type {number}
     * @memberof Teacher
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'middleName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'qualifications'?: string | null;
    /**
     *
     * @type {number}
     * @memberof Teacher
     */
    'departmentId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof Teacher
     */
    'lessonId'?: number | null;
    /**
     *
     * @type {Department}
     * @memberof Teacher
     */
    'department'?: Department;
    /**
     *
     * @type {Array<Lesson>}
     * @memberof Teacher
     */
    'lesson'?: Array<Lesson> | null;
}
/**
 *
 * @export
 * @interface TeacherDepartmentForReadDto
 */
export interface TeacherDepartmentForReadDto {
    /**
     *
     * @type {number}
     * @memberof TeacherDepartmentForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'abbreviation'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForReadDto
     */
    'link'?: string | null;
}
/**
 *
 * @export
 * @interface TeacherDepartmentForWriteDto
 */
export interface TeacherDepartmentForWriteDto {
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'abbreviation'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherDepartmentForWriteDto
     */
    'link'?: string | null;
}
/**
 *
 * @export
 * @interface TeacherForReadDto
 */
export interface TeacherForReadDto {
    /**
     *
     * @type {number}
     * @memberof TeacherForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'middleName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForReadDto
     */
    'qualifications'?: string | null;
    /**
     *
     * @type {TeacherDepartmentForReadDto}
     * @memberof TeacherForReadDto
     */
    'department'?: TeacherDepartmentForReadDto;
}
/**
 *
 * @export
 * @interface TeacherForWriteDto
 */
export interface TeacherForWriteDto {
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'middleName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'qualifications'?: string | null;
    /**
     *
     * @type {number}
     * @memberof TeacherForWriteDto
     */
    'departmentId'?: number | null;
}
/**
 *
 * @export
 * @interface TimeContext
 */
export interface TimeContext {
    /**
     *
     * @type {number}
     * @memberof TimeContext
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof TimeContext
     */
    'lessonIndex'?: number;
    /**
     *
     * @type {DayOfWeek}
     * @memberof TimeContext
     */
    'weekDay'?: DayOfWeek;
    /**
     *
     * @type {number}
     * @memberof TimeContext
     */
    'weekIndex'?: number;
}
/**
 *
 * @export
 * @interface TimeContextForReadDto
 */
export interface TimeContextForReadDto {
    /**
     *
     * @type {number}
     * @memberof TimeContextForReadDto
     */
    'lessonIndex'?: number;
    /**
     *
     * @type {DayOfWeek}
     * @memberof TimeContextForReadDto
     */
    'weekDay'?: DayOfWeek;
    /**
     *
     * @type {number}
     * @memberof TimeContextForReadDto
     */
    'weekIndex'?: number;
}
/**
 *
 * @export
 * @interface TimeContextForWriteDto
 */
export interface TimeContextForWriteDto {
    /**
     *
     * @type {number}
     * @memberof TimeContextForWriteDto
     */
    'lessonIndex'?: number;
    /**
     *
     * @type {DayOfWeek}
     * @memberof TimeContextForWriteDto
     */
    'weekDay'?: DayOfWeek;
    /**
     *
     * @type {number}
     * @memberof TimeContextForWriteDto
     */
    'weekIndex'?: number;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
    /**
     *
     * @type {string}
     * @memberof Token
     */
    'value': string;
}
/**
 *
 * @export
 * @interface UserForLoginDto
 */
export interface UserForLoginDto {
    /**
     *
     * @type {string}
     * @memberof UserForLoginDto
     */
    'userName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserForLoginDto
     */
    'password'?: string | null;
}
/**
 *
 * @export
 * @interface UserForReadDto
 */
export interface UserForReadDto {
    /**
     *
     * @type {string}
     * @memberof UserForReadDto
     */
    'username'?: string | null;
    /**
     *
     * @type {UserRole}
     * @memberof UserForReadDto
     */
    'userRole'?: UserRole;
}
/**
 *
 * @export
 * @interface UserForRegisterDto
 */
export interface UserForRegisterDto {
    /**
     *
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'password'?: string | null;
    /**
     *
     * @type {UserRole}
     * @memberof UserForRegisterDto
     */
    'userRole'?: UserRole;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserRole: {
    readonly NUMBER_0: 0;
};
export type UserRole = typeof UserRole[keyof typeof UserRole];
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost: (userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Token} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenPost: (token?: Token, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost: (userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {Token} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenPost(token?: Token, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserForReadDto>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<AuthenticatedResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {Token} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenPost(token?: Token, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: any): AxiosPromise<UserForReadDto>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticatedResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {Token} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRefreshTokenPost(token?: Token, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserForReadDto, any>>;
}
/**
 * LessonApi - axios parameter creator
 * @export
 */
export declare const LessonApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a list of lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates a lesson.
     * @param {number} id
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonIdPut: (id: number, lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a lesson.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdDelete: (lessonId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdGet: (lessonId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonPost: (lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LessonApi - functional programming interface
 * @export
 */
export declare const LessonApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a list of lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LessonForReadDto>>>;
    /**
     *
     * @summary Updates a lesson.
     * @param {number} id
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>>;
    /**
     *
     * @summary Deletes a lesson.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdDelete(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>>;
    /**
     *
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonForReadDto>>;
};
/**
 * LessonApi - factory interface
 * @export
 */
export declare const LessonApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a list of lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<LessonForReadDto>>;
    /**
     *
     * @summary Updates a lesson.
     * @param {number} id
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: any): AxiosPromise<LessonForReadDto>;
    /**
     *
     * @summary Deletes a lesson.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdDelete(lessonId: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonLessonIdGet(lessonId: number, options?: any): AxiosPromise<LessonForReadDto>;
    /**
     *
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: any): AxiosPromise<LessonForReadDto>;
};
/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export declare class LessonApi extends BaseAPI {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a list of lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LessonForReadDto[], any>>;
    /**
     *
     * @summary Updates a lesson.
     * @param {number} id
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonIdPut(id: number, lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LessonForReadDto, any>>;
    /**
     *
     * @summary Deletes a lesson.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonLessonIdDelete(lessonId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LessonForReadDto, any>>;
    /**
     *
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonPost(lessonForWriteDto?: LessonForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LessonForReadDto, any>>;
}
/**
 * RoomApi - axios parameter creator
 * @export
 */
export declare const RoomApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves a list of rooms.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut: (id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost: (roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoomApi - functional programming interface
 * @export
 */
export declare const RoomApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves a list of rooms.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>>;
};
/**
 * RoomApi - factory interface
 * @export
 */
export declare const RoomApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves a list of rooms.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<Room>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet(id: number, options?: any): AxiosPromise<Room>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<Room>;
};
/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export declare class RoomApi extends BaseAPI {
    /**
     *
     * @summary Retrieves a list of rooms.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room[], any>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room, any>>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room, any>>;
}
/**
 * ScheduleLessonApi - axios parameter creator
 * @export
 */
export declare const ScheduleLessonApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id
     * @param {number} [scheduleLessonId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdDelete: (id: string, scheduleLessonId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing schedule lesson
     * @param {number} id
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdPut: (id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonPost: (scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScheduleLessonApi - functional programming interface
 * @export
 */
export declare const ScheduleLessonApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonForReadDto>>;
    /**
     *
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id
     * @param {number} [scheduleLessonId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonForReadDto>>;
    /**
     *
     * @summary Updates an existing schedule lesson
     * @param {number} id
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonJunction>>;
    /**
     *
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleLessonJunction>>;
};
/**
 * ScheduleLessonApi - factory interface
 * @export
 */
export declare const ScheduleLessonApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<ScheduleLessonForReadDto>;
    /**
     *
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id
     * @param {number} [scheduleLessonId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdGet(id: number, options?: any): AxiosPromise<ScheduleLessonForReadDto>;
    /**
     *
     * @summary Updates an existing schedule lesson
     * @param {number} id
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: any): AxiosPromise<ScheduleLessonJunction>;
    /**
     *
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: any): AxiosPromise<ScheduleLessonJunction>;
};
/**
 * ScheduleLessonApi - object-oriented interface
 * @export
 * @class ScheduleLessonApi
 * @extends {BaseAPI}
 */
export declare class ScheduleLessonApi extends BaseAPI {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleLessonForReadDto, any>>;
    /**
     *
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id
     * @param {number} [scheduleLessonId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdDelete(id: string, scheduleLessonId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleLessonForReadDto, any>>;
    /**
     *
     * @summary Updates an existing schedule lesson
     * @param {number} id
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdPut(id: number, scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleLessonJunction, any>>;
    /**
     *
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonPost(scheduleLessonForWriteDto?: ScheduleLessonForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleLessonJunction, any>>;
}
/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
export declare const StudentsGroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a list of students groups.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut: (id: number, body?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost: (studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
export declare const StudentsGroupApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a list of students groups.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentsGroupForReadDto>>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>>;
};
/**
 * StudentsGroupApi - factory interface
 * @export
 */
export declare const StudentsGroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a list of students groups.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<StudentsGroupForReadDto>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet(id: number, options?: any): AxiosPromise<StudentsGroupForReadDto>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: any): AxiosPromise<StudentsGroupForReadDto>;
};
/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
export declare class StudentsGroupApi extends BaseAPI {
    /**
     *
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a list of students groups.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto[], any>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto, any>>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupPost(studentsGroupForWriteDto?: StudentsGroupForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto, any>>;
}
/**
 * SubjectApi - axios parameter creator
 * @export
 */
export declare const SubjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut: (id: number, subject?: Subject, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost: (subject?: Subject, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SubjectApi - functional programming interface
 * @export
 */
export declare const SubjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subject>>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut(id: number, subject?: Subject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost(subject?: Subject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>>;
};
/**
 * SubjectApi - factory interface
 * @export
 */
export declare const SubjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<Subject>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet(id: number, options?: any): AxiosPromise<Subject>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut(id: number, subject?: Subject, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost(subject?: Subject, options?: any): AxiosPromise<Subject>;
};
/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export declare class SubjectApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all subjects
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject[], any>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject, any>>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdPut(id: number, subject?: Subject, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectPost(subject?: Subject, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject, any>>;
}
/**
 * TeacherApi - axios parameter creator
 * @export
 */
export declare const TeacherApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a list of teachers.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet: (range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut: (id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost: (teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeacherApi - functional programming interface
 * @export
 */
export declare const TeacherApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a list of teachers.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeacherForReadDto>>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>>;
};
/**
 * TeacherApi - factory interface
 * @export
 */
export declare const TeacherApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a list of teachers.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet(range?: string, sort?: string, filter?: string, options?: any): AxiosPromise<Array<TeacherForReadDto>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet(id: number, options?: any): AxiosPromise<Teacher>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<Teacher>;
};
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export declare class TeacherApi extends BaseAPI {
    /**
     *
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a list of teachers.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherGet(range?: string, sort?: string, filter?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherForReadDto[], any>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Teacher, any>>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Teacher, any>>;
}
/**
 * TeacherDepartmentApi - axios parameter creator
 * @export
 */
export declare const TeacherDepartmentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdPut: (id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentPost: (teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeacherDepartmentApi - functional programming interface
 * @export
 */
export declare const TeacherDepartmentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>>;
};
/**
 * TeacherDepartmentApi - factory interface
 * @export
 */
export declare const TeacherDepartmentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentGet(options?: any): AxiosPromise<Array<Department>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdGet(id: number, options?: any): AxiosPromise<Department>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: any): AxiosPromise<Department>;
};
/**
 * TeacherDepartmentApi - object-oriented interface
 * @export
 * @class TeacherDepartmentApi
 * @extends {BaseAPI}
 */
export declare class TeacherDepartmentApi extends BaseAPI {
    /**
     *
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department[], any>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department, any>>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdPut(id: number, teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentPost(teacherDepartmentForWriteDto?: TeacherDepartmentForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department, any>>;
}
