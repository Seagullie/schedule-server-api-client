/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Article
 */
export interface Article {
    /**
     *
     * @type {number}
     * @memberof Article
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    'body': string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    'published'?: string;
    /**
     *
     * @type {number}
     * @memberof Article
     */
    'authorId'?: number;
    /**
     *
     * @type {Author}
     * @memberof Article
     */
    'author'?: Author;
}
/**
 *
 * @export
 * @interface ArticleForReadDto
 */
export interface ArticleForReadDto {
    /**
     *
     * @type {number}
     * @memberof ArticleForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof ArticleForReadDto
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ArticleForReadDto
     */
    'published'?: string;
    /**
     *
     * @type {number}
     * @memberof ArticleForReadDto
     */
    'authorId'?: number;
}
/**
 *
 * @export
 * @interface ArticleForWriteDto
 */
export interface ArticleForWriteDto {
    /**
     *
     * @type {string}
     * @memberof ArticleForWriteDto
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ArticleForWriteDto
     */
    'body': string;
    /**
     *
     * @type {number}
     * @memberof ArticleForWriteDto
     */
    'authorId'?: number;
}
/**
 *
 * @export
 * @interface AuthenticatedResponse
 */
export interface AuthenticatedResponse {
    /**
     *
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'accessToken'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AuthenticatedResponse
     */
    'refreshToken'?: string | null;
}
/**
 *
 * @export
 * @interface Author
 */
export interface Author {
    /**
     *
     * @type {number}
     * @memberof Author
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    'nickName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Author
     */
    'bio'?: string | null;
}
/**
 *
 * @export
 * @interface AuthorForReadDto
 */
export interface AuthorForReadDto {
    /**
     *
     * @type {number}
     * @memberof AuthorForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'nickName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AuthorForReadDto
     */
    'email'?: string | null;
}
/**
 *
 * @export
 * @interface AuthorForWriteDto
 */
export interface AuthorForWriteDto {
    /**
     *
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'firstName': string;
    /**
     *
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'lastName': string;
    /**
     *
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'nickName': string;
    /**
     *
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof AuthorForWriteDto
     */
    'bio': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ClassType: {
    readonly NUMBER_0: 0;
    readonly NUMBER_1: 1;
    readonly NUMBER_2: 2;
};
export type ClassType = typeof ClassType[keyof typeof ClassType];
/**
 *
 * @export
 * @interface Department
 */
export interface Department {
    /**
     *
     * @type {number}
     * @memberof Department
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'abbreviation'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    'link'?: string | null;
}
/**
 *
 * @export
 * @interface DepartmentForWriteDto
 */
export interface DepartmentForWriteDto {
    /**
     *
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'abbreviation'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DepartmentForWriteDto
     */
    'link'?: string | null;
}
/**
 *
 * @export
 * @interface LessonForReadDto
 */
export interface LessonForReadDto {
    /**
     *
     * @type {number}
     * @memberof LessonForReadDto
     */
    'sequence'?: number;
    /**
     *
     * @type {string}
     * @memberof LessonForReadDto
     */
    'subject'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LessonForReadDto
     */
    'teacher'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LessonForReadDto
     */
    'room'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LessonForReadDto
     */
    'classType'?: string | null;
}
/**
 *
 * @export
 * @interface LessonForWriteDto
 */
export interface LessonForWriteDto {
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'sequence'?: number;
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'subjectId'?: number;
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'teacherId'?: number | null;
    /**
     *
     * @type {number}
     * @memberof LessonForWriteDto
     */
    'roomId'?: number | null;
    /**
     *
     * @type {ClassType}
     * @memberof LessonForWriteDto
     */
    'classType'?: ClassType;
}
/**
 *
 * @export
 * @interface Room
 */
export interface Room {
    /**
     *
     * @type {number}
     * @memberof Room
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Room
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface RoomForWriteDto
 */
export interface RoomForWriteDto {
    /**
     *
     * @type {string}
     * @memberof RoomForWriteDto
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface StudentsGroupForReadDto
 */
export interface StudentsGroupForReadDto {
    /**
     *
     * @type {number}
     * @memberof StudentsGroupForReadDto
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof StudentsGroupForReadDto
     */
    'groupName'?: string | null;
}
/**
 *
 * @export
 * @interface StudentsGroupForWriteDto
 */
export interface StudentsGroupForWriteDto {
    /**
     *
     * @type {string}
     * @memberof StudentsGroupForWriteDto
     */
    'groupName'?: string | null;
    /**
     *
     * @type {WeekScheduleForReadDto}
     * @memberof StudentsGroupForWriteDto
     */
    'firstWeekSchedule'?: WeekScheduleForReadDto;
    /**
     *
     * @type {WeekScheduleForReadDto}
     * @memberof StudentsGroupForWriteDto
     */
    'secondWeekSchedule'?: WeekScheduleForReadDto;
}
/**
 *
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     *
     * @type {number}
     * @memberof Subject
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Subject
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     *
     * @type {number}
     * @memberof Teacher
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'middleName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Teacher
     */
    'qualifications'?: string | null;
    /**
     *
     * @type {Department}
     * @memberof Teacher
     */
    'department'?: Department;
}
/**
 *
 * @export
 * @interface TeacherForWriteDto
 */
export interface TeacherForWriteDto {
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'firstName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'lastName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'middleName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TeacherForWriteDto
     */
    'qualifications'?: string | null;
    /**
     *
     * @type {number}
     * @memberof TeacherForWriteDto
     */
    'departmentId'?: number | null;
}
/**
 *
 * @export
 * @interface UserForLoginDto
 */
export interface UserForLoginDto {
    /**
     *
     * @type {string}
     * @memberof UserForLoginDto
     */
    'userName'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserForLoginDto
     */
    'password'?: string | null;
}
/**
 *
 * @export
 * @interface UserForReadDto
 */
export interface UserForReadDto {
    /**
     *
     * @type {string}
     * @memberof UserForReadDto
     */
    'username'?: string | null;
    /**
     *
     * @type {UserRole}
     * @memberof UserForReadDto
     */
    'userRole'?: UserRole;
}
/**
 *
 * @export
 * @interface UserForRegisterDto
 */
export interface UserForRegisterDto {
    /**
     *
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'username'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserForRegisterDto
     */
    'password'?: string | null;
    /**
     *
     * @type {UserRole}
     * @memberof UserForRegisterDto
     */
    'userRole'?: UserRole;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UserRole: {
    readonly NUMBER_0: 0;
};
export type UserRole = typeof UserRole[keyof typeof UserRole];
/**
 *
 * @export
 * @interface WeekScheduleForReadDto
 */
export interface WeekScheduleForReadDto {
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'sunday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'monday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'tuesday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'wednesday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'thursday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'friday'?: Array<LessonForReadDto> | null;
    /**
     *
     * @type {Array<LessonForReadDto>}
     * @memberof WeekScheduleForReadDto
     */
    'saturday'?: Array<LessonForReadDto> | null;
}
/**
 *
 * @export
 * @interface WeekScheduleForWriteDto
 */
export interface WeekScheduleForWriteDto {
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'sunday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'monday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'tuesday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'wednesday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'thursday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'friday'?: Array<LessonForWriteDto> | null;
    /**
     *
     * @type {Array<LessonForWriteDto>}
     * @memberof WeekScheduleForWriteDto
     */
    'saturday'?: Array<LessonForWriteDto> | null;
}
/**
 * ArticleApi - axios parameter creator
 * @export
 */
export declare const ArticleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdPut: (id: number, articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticlePost: (articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ArticleApi - functional programming interface
 * @export
 */
export declare const ArticleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleForReadDto>>>;
    /**
     *
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>>;
    /**
     *
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>>;
};
/**
 * ArticleApi - factory interface
 * @export
 */
export declare const ArticleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleGet(options?: any): AxiosPromise<Array<ArticleForReadDto>>;
    /**
     *
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdGet(id: number, options?: any): AxiosPromise<Article>;
    /**
     *
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: any): AxiosPromise<Article>;
};
/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export declare class ArticleApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ArticleForReadDto[], any>>;
    /**
     *
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Article, any>>;
    /**
     *
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdPut(id: number, articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticlePost(articleForWriteDto?: ArticleForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Article, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost: (userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost: (userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserForReadDto>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: any): AxiosPromise<AuthenticatedResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthLogoutDelete(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRefreshTokenGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: any): AxiosPromise<UserForReadDto>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLoginPost(userForLoginDto?: UserForLoginDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthenticatedResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLogoutDelete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRefreshTokenGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRegisterPost(userForRegisterDto?: UserForRegisterDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserForReadDto, any>>;
}
/**
 * AuthorApi - axios parameter creator
 * @export
 */
export declare const AuthorApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdPut: (id: number, authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorPost: (authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthorApi - functional programming interface
 * @export
 */
export declare const AuthorApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthorForReadDto>>>;
    /**
     *
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>>;
    /**
     *
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>>;
};
/**
 * AuthorApi - factory interface
 * @export
 */
export declare const AuthorApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorGet(options?: any): AxiosPromise<Array<AuthorForReadDto>>;
    /**
     *
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdGet(id: number, options?: any): AxiosPromise<Author>;
    /**
     *
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: any): AxiosPromise<Author>;
};
/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
export declare class AuthorApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorForReadDto[], any>>;
    /**
     *
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Author, any>>;
    /**
     *
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdPut(id: number, authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorPost(authorForWriteDto?: AuthorForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Author, any>>;
}
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export declare const DepartmentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdPut: (id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentPost: (departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DepartmentApi - functional programming interface
 * @export
 */
export declare const DepartmentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>>;
};
/**
 * DepartmentApi - factory interface
 * @export
 */
export declare const DepartmentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentGet(options?: any): AxiosPromise<Array<Department>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdGet(id: number, options?: any): AxiosPromise<Department>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: any): AxiosPromise<Department>;
};
/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export declare class DepartmentApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department[], any>>;
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department, any>>;
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdPut(id: number, departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentPost(departmentForWriteDto?: DepartmentForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Department, any>>;
}
/**
 * RoomApi - axios parameter creator
 * @export
 */
export declare const RoomApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut: (id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost: (roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoomApi - functional programming interface
 * @export
 */
export declare const RoomApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Room>>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Room>>;
};
/**
 * RoomApi - factory interface
 * @export
 */
export declare const RoomApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomGet(options?: any): AxiosPromise<Array<Room>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdGet(id: number, options?: any): AxiosPromise<Room>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: any): AxiosPromise<Room>;
};
/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export declare class RoomApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room[], any>>;
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room, any>>;
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdPut(id: number, roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomPost(roomForWriteDto?: RoomForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Room, any>>;
}
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export declare const ScheduleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleDelete: (studentsGroupId?: number, isSecondWeek?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSchedulePost: (studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleStudentsGroupIdGet: (studentsGroupId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScheduleApi - functional programming interface
 * @export
 */
export declare const ScheduleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WeekScheduleForReadDto>>;
    /**
     *
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForWriteDto>>;
};
/**
 * ScheduleApi - factory interface
 * @export
 */
export declare const ScheduleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: any): AxiosPromise<WeekScheduleForReadDto>;
    /**
     *
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: any): AxiosPromise<StudentsGroupForWriteDto>;
};
/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export declare class ScheduleApi extends BaseAPI {
    /**
     *
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiScheduleDelete(studentsGroupId?: number, isSecondWeek?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiSchedulePost(studentsGroupId?: number, isSecondWeek?: boolean, weekScheduleForWriteDto?: WeekScheduleForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WeekScheduleForReadDto, any>>;
    /**
     *
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiScheduleStudentsGroupIdGet(studentsGroupId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForWriteDto, any>>;
}
/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
export declare const StudentsGroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut: (id: number, body?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost: (body?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
export declare const StudentsGroupApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentsGroupForReadDto>>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsGroupForReadDto>>;
};
/**
 * StudentsGroupApi - factory interface
 * @export
 */
export declare const StudentsGroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupGet(options?: any): AxiosPromise<Array<StudentsGroupForReadDto>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdGet(id: number, options?: any): AxiosPromise<StudentsGroupForReadDto>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStudentsGroupPost(body?: string, options?: any): AxiosPromise<StudentsGroupForReadDto>;
};
/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
export declare class StudentsGroupApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto[], any>>;
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto, any>>;
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupPost(body?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentsGroupForReadDto, any>>;
}
/**
 * SubjectApi - axios parameter creator
 * @export
 */
export declare const SubjectApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut: (id: number, body?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost: (body?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SubjectApi - functional programming interface
 * @export
 */
export declare const SubjectApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Subject>>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>>;
};
/**
 * SubjectApi - factory interface
 * @export
 */
export declare const SubjectApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectGet(options?: any): AxiosPromise<Array<Subject>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdGet(id: number, options?: any): AxiosPromise<Subject>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectIdPut(id: number, body?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSubjectPost(body?: string, options?: any): AxiosPromise<Subject>;
};
/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export declare class SubjectApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject[], any>>;
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject, any>>;
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectPost(body?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject, any>>;
}
/**
 * TeacherApi - axios parameter creator
 * @export
 */
export declare const TeacherApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet: (id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut: (id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost: (teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeacherApi - functional programming interface
 * @export
 */
export declare const TeacherApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>>;
};
/**
 * TeacherApi - factory interface
 * @export
 */
export declare const TeacherApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherGet(options?: any): AxiosPromise<Array<Teacher>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdDelete(id: number, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdGet(id: number, options?: any): AxiosPromise<Teacher>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: any): AxiosPromise<Teacher>;
};
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export declare class TeacherApi extends BaseAPI {
    /**
     *
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Teacher[], any>>;
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdDelete(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdGet(id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Teacher, any>>;
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdPut(id: number, teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherPost(teacherForWriteDto?: TeacherForWriteDto, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Teacher, any>>;
}
