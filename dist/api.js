"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeacherApi = exports.TeacherApiFactory = exports.TeacherApiFp = exports.TeacherApiAxiosParamCreator = exports.SubjectApi = exports.SubjectApiFactory = exports.SubjectApiFp = exports.SubjectApiAxiosParamCreator = exports.StudentsGroupApi = exports.StudentsGroupApiFactory = exports.StudentsGroupApiFp = exports.StudentsGroupApiAxiosParamCreator = exports.ScheduleApi = exports.ScheduleApiFactory = exports.ScheduleApiFp = exports.ScheduleApiAxiosParamCreator = exports.RoomApi = exports.RoomApiFactory = exports.RoomApiFp = exports.RoomApiAxiosParamCreator = exports.DepartmentApi = exports.DepartmentApiFactory = exports.DepartmentApiFp = exports.DepartmentApiAxiosParamCreator = exports.AuthorApi = exports.AuthorApiFactory = exports.AuthorApiFp = exports.AuthorApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.ArticleApi = exports.ArticleApiFactory = exports.ArticleApiFp = exports.ArticleApiAxiosParamCreator = exports.UserRole = exports.ClassType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.ClassType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
/**
 *
 * @export
 * @enum {string}
 */
exports.UserRole = {
    NUMBER_0: 0
};
/**
 * ArticleApi - axios parameter creator
 * @export
 */
const ArticleApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiArticleIdDelete', 'id', id);
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiArticleIdGet', 'id', id);
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdPut: (id, articleForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiArticleIdPut', 'id', id);
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(articleForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlePost: (articleForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(articleForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ArticleApiAxiosParamCreator = ArticleApiAxiosParamCreator;
/**
 * ArticleApi - functional programming interface
 * @export
 */
const ArticleApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ArticleApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiArticleGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiArticleIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiArticleIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdPut(id, articleForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiArticleIdPut(id, articleForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlePost(articleForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiArticlePost(articleForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ArticleApiFp = ArticleApiFp;
/**
 * ArticleApi - factory interface
 * @export
 */
const ArticleApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ArticleApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleGet(options) {
            return localVarFp.apiArticleGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a article
         * @param {number} id The ID of the article to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdDelete(id, options) {
            return localVarFp.apiArticleIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a article by its ID
         * @param {number} id Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdGet(id, options) {
            return localVarFp.apiArticleIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing article
         * @param {number} id The ID of the article to update
         * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticleIdPut(id, articleForWriteDto, options) {
            return localVarFp.apiArticleIdPut(id, articleForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new article
         * @param {ArticleForWriteDto} [articleForWriteDto] The new article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlePost(articleForWriteDto, options) {
            return localVarFp.apiArticlePost(articleForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ArticleApiFactory = ArticleApiFactory;
/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
class ArticleApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleGet(options) {
        return (0, exports.ArticleApiFp)(this.configuration).apiArticleGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a article
     * @param {number} id The ID of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdDelete(id, options) {
        return (0, exports.ArticleApiFp)(this.configuration).apiArticleIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a article by its ID
     * @param {number} id Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdGet(id, options) {
        return (0, exports.ArticleApiFp)(this.configuration).apiArticleIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing article
     * @param {number} id The ID of the article to update
     * @param {ArticleForWriteDto} [articleForWriteDto] The updated article data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticleIdPut(id, articleForWriteDto, options) {
        return (0, exports.ArticleApiFp)(this.configuration).apiArticleIdPut(id, articleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new article
     * @param {ArticleForWriteDto} [articleForWriteDto] The new article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    apiArticlePost(articleForWriteDto, options) {
        return (0, exports.ArticleApiFp)(this.configuration).apiArticlePost(articleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ArticleApi = ArticleApi;
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: (userForLoginDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userForLoginDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: (userForRegisterDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userForRegisterDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthLoginPost(userForLoginDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthLogoutDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthRefreshTokenGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthRegisterPost(userForRegisterDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto, options) {
            return localVarFp.apiAuthLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options) {
            return localVarFp.apiAuthLogoutDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenGet(options) {
            return localVarFp.apiAuthRefreshTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto, options) {
            return localVarFp.apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLoginPost(userForLoginDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLogoutDelete(options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRefreshTokenGet(options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthRefreshTokenGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRegisterPost(userForRegisterDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * AuthorApi - axios parameter creator
 * @export
 */
const AuthorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiAuthorIdDelete', 'id', id);
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiAuthorIdGet', 'id', id);
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdPut: (id, authorForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiAuthorIdPut', 'id', id);
            const localVarPath = `/api/Author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authorForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorPost: (authorForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authorForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthorApiAxiosParamCreator = AuthorApiAxiosParamCreator;
/**
 * AuthorApi - functional programming interface
 * @export
 */
const AuthorApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthorApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdPut(id, authorForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorIdPut(id, authorForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorPost(authorForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthorPost(authorForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthorApiFp = AuthorApiFp;
/**
 * AuthorApi - factory interface
 * @export
 */
const AuthorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthorApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorGet(options) {
            return localVarFp.apiAuthorGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a author
         * @param {number} id The ID of the author to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdDelete(id, options) {
            return localVarFp.apiAuthorIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a author by its ID
         * @param {number} id Author ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdGet(id, options) {
            return localVarFp.apiAuthorIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing author
         * @param {number} id The ID of the author to update
         * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorIdPut(id, authorForWriteDto, options) {
            return localVarFp.apiAuthorIdPut(id, authorForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new author
         * @param {AuthorForWriteDto} [authorForWriteDto] The new author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorPost(authorForWriteDto, options) {
            return localVarFp.apiAuthorPost(authorForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthorApiFactory = AuthorApiFactory;
/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
class AuthorApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorGet(options) {
        return (0, exports.AuthorApiFp)(this.configuration).apiAuthorGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a author
     * @param {number} id The ID of the author to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdDelete(id, options) {
        return (0, exports.AuthorApiFp)(this.configuration).apiAuthorIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a author by its ID
     * @param {number} id Author ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdGet(id, options) {
        return (0, exports.AuthorApiFp)(this.configuration).apiAuthorIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing author
     * @param {number} id The ID of the author to update
     * @param {AuthorForWriteDto} [authorForWriteDto] The updated author data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorIdPut(id, authorForWriteDto, options) {
        return (0, exports.AuthorApiFp)(this.configuration).apiAuthorIdPut(id, authorForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new author
     * @param {AuthorForWriteDto} [authorForWriteDto] The new author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    apiAuthorPost(authorForWriteDto, options) {
        return (0, exports.AuthorApiFp)(this.configuration).apiAuthorPost(authorForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorApi = AuthorApi;
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
const DepartmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiDepartmentIdDelete', 'id', id);
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiDepartmentIdGet', 'id', id);
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdPut: (id, departmentForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiDepartmentIdPut', 'id', id);
            const localVarPath = `/api/Department/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(departmentForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentPost: (departmentForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Department`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(departmentForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DepartmentApiAxiosParamCreator = DepartmentApiAxiosParamCreator;
/**
 * DepartmentApi - functional programming interface
 * @export
 */
const DepartmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DepartmentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiDepartmentGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiDepartmentIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiDepartmentIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdPut(id, departmentForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiDepartmentIdPut(id, departmentForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentPost(departmentForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiDepartmentPost(departmentForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.DepartmentApiFp = DepartmentApiFp;
/**
 * DepartmentApi - factory interface
 * @export
 */
const DepartmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DepartmentApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentGet(options) {
            return localVarFp.apiDepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdDelete(id, options) {
            return localVarFp.apiDepartmentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdGet(id, options) {
            return localVarFp.apiDepartmentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentIdPut(id, departmentForWriteDto, options) {
            return localVarFp.apiDepartmentIdPut(id, departmentForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new department
         * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDepartmentPost(departmentForWriteDto, options) {
            return localVarFp.apiDepartmentPost(departmentForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DepartmentApiFactory = DepartmentApiFactory;
/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
class DepartmentApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentGet(options) {
        return (0, exports.DepartmentApiFp)(this.configuration).apiDepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdDelete(id, options) {
        return (0, exports.DepartmentApiFp)(this.configuration).apiDepartmentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdGet(id, options) {
        return (0, exports.DepartmentApiFp)(this.configuration).apiDepartmentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentIdPut(id, departmentForWriteDto, options) {
        return (0, exports.DepartmentApiFp)(this.configuration).apiDepartmentIdPut(id, departmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new department
     * @param {DepartmentForWriteDto} [departmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiDepartmentPost(departmentForWriteDto, options) {
        return (0, exports.DepartmentApiFp)(this.configuration).apiDepartmentPost(departmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DepartmentApi = DepartmentApi;
/**
 * RoomApi - axios parameter creator
 * @export
 */
const RoomApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdDelete', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdGet', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut: (id, roomForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdPut', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roomForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost: (roomForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roomForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RoomApiAxiosParamCreator = RoomApiAxiosParamCreator;
/**
 * RoomApi - functional programming interface
 * @export
 */
const RoomApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RoomApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id, roomForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdPut(id, roomForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomPost(roomForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RoomApiFp = RoomApiFp;
/**
 * RoomApi - factory interface
 * @export
 */
const RoomApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RoomApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(options) {
            return localVarFp.apiRoomGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id, options) {
            return localVarFp.apiRoomIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id, options) {
            return localVarFp.apiRoomIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id, roomForWriteDto, options) {
            return localVarFp.apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto, options) {
            return localVarFp.apiRoomPost(roomForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RoomApiFactory = RoomApiFactory;
/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
class RoomApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomGet(options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdDelete(id, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdGet(id, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdPut(id, roomForWriteDto, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomPost(roomForWriteDto, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomPost(roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RoomApi = RoomApi;
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
const ScheduleApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleDelete: (studentsGroupId, isSecondWeek, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (studentsGroupId !== undefined) {
                localVarQueryParameter['studentsGroupId'] = studentsGroupId;
            }
            if (isSecondWeek !== undefined) {
                localVarQueryParameter['isSecondWeek'] = isSecondWeek;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulePost: (studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (studentsGroupId !== undefined) {
                localVarQueryParameter['studentsGroupId'] = studentsGroupId;
            }
            if (isSecondWeek !== undefined) {
                localVarQueryParameter['isSecondWeek'] = isSecondWeek;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(weekScheduleForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleStudentsGroupIdGet: (studentsGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studentsGroupId' is not null or undefined
            (0, common_1.assertParamExists)('apiScheduleStudentsGroupIdGet', 'studentsGroupId', studentsGroupId);
            const localVarPath = `/api/Schedule/{studentsGroupId}`
                .replace(`{${"studentsGroupId"}}`, encodeURIComponent(String(studentsGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ScheduleApiAxiosParamCreator = ScheduleApiAxiosParamCreator;
/**
 * ScheduleApi - functional programming interface
 * @export
 */
const ScheduleApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ScheduleApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleDelete(studentsGroupId, isSecondWeek, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleDelete(studentsGroupId, isSecondWeek, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleStudentsGroupIdGet(studentsGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleStudentsGroupIdGet(studentsGroupId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ScheduleApiFp = ScheduleApiFp;
/**
 * ScheduleApi - factory interface
 * @export
 */
const ScheduleApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ScheduleApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes a firs or second week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleDelete(studentsGroupId, isSecondWeek, options) {
            return localVarFp.apiScheduleDelete(studentsGroupId, isSecondWeek, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a one week schedule for students group
         * @param {number} [studentsGroupId] Students group ID
         * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
         * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options) {
            return localVarFp.apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a students group two weeks schedule by group ID
         * @param {number} studentsGroupId Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleStudentsGroupIdGet(studentsGroupId, options) {
            return localVarFp.apiScheduleStudentsGroupIdGet(studentsGroupId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ScheduleApiFactory = ScheduleApiFactory;
/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
class ScheduleApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes a firs or second week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to delete, the first or the second. By default, the first
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiScheduleDelete(studentsGroupId, isSecondWeek, options) {
        return (0, exports.ScheduleApiFp)(this.configuration).apiScheduleDelete(studentsGroupId, isSecondWeek, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a one week schedule for students group
     * @param {number} [studentsGroupId] Students group ID
     * @param {boolean} [isSecondWeek] Specifies which week to update, the first or the second. By default, the first
     * @param {WeekScheduleForWriteDto} [weekScheduleForWriteDto] The one week schedule data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options) {
        return (0, exports.ScheduleApiFp)(this.configuration).apiSchedulePost(studentsGroupId, isSecondWeek, weekScheduleForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a students group two weeks schedule by group ID
     * @param {number} studentsGroupId Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    apiScheduleStudentsGroupIdGet(studentsGroupId, options) {
        return (0, exports.ScheduleApiFp)(this.configuration).apiScheduleStudentsGroupIdGet(studentsGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ScheduleApi = ScheduleApi;
/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
const StudentsGroupApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdDelete', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdGet', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut: (id, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdPut', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StudentsGroupApiAxiosParamCreator = StudentsGroupApiAxiosParamCreator;
/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
const StudentsGroupApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StudentsGroupApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdPut(id, body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupPost(body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.StudentsGroupApiFp = StudentsGroupApiFp;
/**
 * StudentsGroupApi - factory interface
 * @export
 */
const StudentsGroupApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StudentsGroupApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all students groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(options) {
            return localVarFp.apiStudentsGroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id, options) {
            return localVarFp.apiStudentsGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id, options) {
            return localVarFp.apiStudentsGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id, body, options) {
            return localVarFp.apiStudentsGroupIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new students group
         * @param {string} [body] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(body, options) {
            return localVarFp.apiStudentsGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StudentsGroupApiFactory = StudentsGroupApiFactory;
/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
class StudentsGroupApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all students groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupGet(options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdDelete(id, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdGet(id, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdPut(id, body, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new students group
     * @param {string} [body] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupPost(body, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudentsGroupApi = StudentsGroupApi;
/**
 * SubjectApi - axios parameter creator
 * @export
 */
const SubjectApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdDelete', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdGet', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut: (id, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdPut', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SubjectApiAxiosParamCreator = SubjectApiAxiosParamCreator;
/**
 * SubjectApi - functional programming interface
 * @export
 */
const SubjectApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SubjectApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdPut(id, body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectPost(body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SubjectApiFp = SubjectApiFp;
/**
 * SubjectApi - factory interface
 * @export
 */
const SubjectApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SubjectApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(options) {
            return localVarFp.apiSubjectGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id, options) {
            return localVarFp.apiSubjectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id, options) {
            return localVarFp.apiSubjectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {string} [body] The updated subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id, body, options) {
            return localVarFp.apiSubjectIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new subject
         * @param {string} [body] The subject name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(body, options) {
            return localVarFp.apiSubjectPost(body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SubjectApiFactory = SubjectApiFactory;
/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
class SubjectApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectGet(options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdDelete(id, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdGet(id, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {string} [body] The updated subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdPut(id, body, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new subject
     * @param {string} [body] The subject name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectPost(body, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SubjectApi = SubjectApi;
/**
 * TeacherApi - axios parameter creator
 * @export
 */
const TeacherApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdDelete', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdGet', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut: (id, teacherForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdPut', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost: (teacherForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TeacherApiAxiosParamCreator = TeacherApiAxiosParamCreator;
/**
 * TeacherApi - functional programming interface
 * @export
 */
const TeacherApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TeacherApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id, teacherForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdPut(id, teacherForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherPost(teacherForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TeacherApiFp = TeacherApiFp;
/**
 * TeacherApi - factory interface
 * @export
 */
const TeacherApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TeacherApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(options) {
            return localVarFp.apiTeacherGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id, options) {
            return localVarFp.apiTeacherIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id, options) {
            return localVarFp.apiTeacherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id, teacherForWriteDto, options) {
            return localVarFp.apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto, options) {
            return localVarFp.apiTeacherPost(teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TeacherApiFactory = TeacherApiFactory;
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
class TeacherApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherGet(options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdDelete(id, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdGet(id, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdPut(id, teacherForWriteDto, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherPost(teacherForWriteDto, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherPost(teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeacherApi = TeacherApi;
