"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Interactive Schedule UAD API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeacherDepartmentApi = exports.TeacherDepartmentApiFactory = exports.TeacherDepartmentApiFp = exports.TeacherDepartmentApiAxiosParamCreator = exports.TeacherApi = exports.TeacherApiFactory = exports.TeacherApiFp = exports.TeacherApiAxiosParamCreator = exports.SubjectApi = exports.SubjectApiFactory = exports.SubjectApiFp = exports.SubjectApiAxiosParamCreator = exports.StudentsGroupApi = exports.StudentsGroupApiFactory = exports.StudentsGroupApiFp = exports.StudentsGroupApiAxiosParamCreator = exports.ScheduleLessonApi = exports.ScheduleLessonApiFactory = exports.ScheduleLessonApiFp = exports.ScheduleLessonApiAxiosParamCreator = exports.RoomApi = exports.RoomApiFactory = exports.RoomApiFp = exports.RoomApiAxiosParamCreator = exports.LessonApi = exports.LessonApiFactory = exports.LessonApiFp = exports.LessonApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.UserRole = exports.DayOfWeek = exports.ClassType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.ClassType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DayOfWeek = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
};
/**
 *
 * @export
 * @enum {string}
 */
exports.UserRole = {
    NUMBER_0: 0
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: (userForLoginDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userForLoginDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Token} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/RefreshToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(token, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: (userForRegisterDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userForRegisterDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthLoginPost(userForLoginDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthLogoutDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Token} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthRefreshTokenPost(token, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiAuthRegisterPost(userForRegisterDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @param {UserForLoginDto} [userForLoginDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(userForLoginDto, options) {
            return localVarFp.apiAuthLoginPost(userForLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutDelete(options) {
            return localVarFp.apiAuthLogoutDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Token} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshTokenPost(token, options) {
            return localVarFp.apiAuthRefreshTokenPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UserForRegisterDto} [userForRegisterDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(userForRegisterDto, options) {
            return localVarFp.apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @param {UserForLoginDto} [userForLoginDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLoginPost(userForLoginDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthLoginPost(userForLoginDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthLogoutDelete(options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthLogoutDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Token} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRefreshTokenPost(token, options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthRefreshTokenPost(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UserForRegisterDto} [userForRegisterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiAuthRegisterPost(userForRegisterDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).apiAuthRegisterPost(userForRegisterDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * LessonApi - axios parameter creator
 * @export
 */
const LessonApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a list of lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates a lesson.
         * @param {number} id
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonIdPut: (id, lessonForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiLessonIdPut', 'id', id);
            const localVarPath = `/api/Lesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lessonForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a lesson.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdDelete: (lessonId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'lessonId' is not null or undefined
            (0, common_1.assertParamExists)('apiLessonLessonIdDelete', 'lessonId', lessonId);
            const localVarPath = `/api/Lesson/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdGet: (lessonId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'lessonId' is not null or undefined
            (0, common_1.assertParamExists)('apiLessonLessonIdGet', 'lessonId', lessonId);
            const localVarPath = `/api/Lesson/{lessonId}`
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonPost: (lessonForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lessonForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.LessonApiAxiosParamCreator = LessonApiAxiosParamCreator;
/**
 * LessonApi - functional programming interface
 * @export
 */
const LessonApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LessonApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a list of lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates a lesson.
         * @param {number} id
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonIdPut(id, lessonForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonIdPut(id, lessonForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a lesson.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdDelete(lessonId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonLessonIdDelete(lessonId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdGet(lessonId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonLessonIdGet(lessonId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonPost(lessonForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiLessonPost(lessonForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.LessonApiFp = LessonApiFp;
/**
 * LessonApi - factory interface
 * @export
 */
const LessonApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LessonApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonDelete(options) {
            return localVarFp.apiLessonDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a list of lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonGet(range, sort, filter, options) {
            return localVarFp.apiLessonGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates a lesson.
         * @param {number} id
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonIdPut(id, lessonForWriteDto, options) {
            return localVarFp.apiLessonIdPut(id, lessonForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a lesson.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdDelete(lessonId, options) {
            return localVarFp.apiLessonLessonIdDelete(lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a lesson by Id.
         * @param {number} lessonId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonLessonIdGet(lessonId, options) {
            return localVarFp.apiLessonLessonIdGet(lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new lesson.
         * @param {LessonForWriteDto} [lessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLessonPost(lessonForWriteDto, options) {
            return localVarFp.apiLessonPost(lessonForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LessonApiFactory = LessonApiFactory;
/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
class LessonApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonDelete(options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a list of lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonGet(range, sort, filter, options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates a lesson.
     * @param {number} id
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonIdPut(id, lessonForWriteDto, options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonIdPut(id, lessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a lesson.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonLessonIdDelete(lessonId, options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonLessonIdDelete(lessonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a lesson by Id.
     * @param {number} lessonId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonLessonIdGet(lessonId, options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonLessonIdGet(lessonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new lesson.
     * @param {LessonForWriteDto} [lessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiLessonPost(lessonForWriteDto, options) {
        return (0, exports.LessonApiFp)(this.configuration).apiLessonPost(lessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LessonApi = LessonApi;
/**
 * RoomApi - axios parameter creator
 * @export
 */
const RoomApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves a list of rooms.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdDelete', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdGet', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut: (id, roomForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiRoomIdPut', 'id', id);
            const localVarPath = `/api/Room/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roomForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost: (roomForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roomForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RoomApiAxiosParamCreator = RoomApiAxiosParamCreator;
/**
 * RoomApi - functional programming interface
 * @export
 */
const RoomApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.RoomApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves a list of rooms.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id, roomForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomIdPut(id, roomForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiRoomPost(roomForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RoomApiFp = RoomApiFp;
/**
 * RoomApi - factory interface
 * @export
 */
const RoomApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.RoomApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves a list of rooms.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomGet(range, sort, filter, options) {
            return localVarFp.apiRoomGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a room
         * @param {number} id The ID of the room to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdDelete(id, options) {
            return localVarFp.apiRoomIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a room by its ID
         * @param {number} id Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdGet(id, options) {
            return localVarFp.apiRoomIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing room
         * @param {number} id The ID of the room to update
         * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomIdPut(id, roomForWriteDto, options) {
            return localVarFp.apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new room
         * @param {RoomForWriteDto} [roomForWriteDto] The room name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(roomForWriteDto, options) {
            return localVarFp.apiRoomPost(roomForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RoomApiFactory = RoomApiFactory;
/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
class RoomApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves a list of rooms.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomGet(range, sort, filter, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a room
     * @param {number} id The ID of the room to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdDelete(id, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a room by its ID
     * @param {number} id Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdGet(id, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing room
     * @param {number} id The ID of the room to update
     * @param {RoomForWriteDto} [roomForWriteDto] The updated room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomIdPut(id, roomForWriteDto, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomIdPut(id, roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new room
     * @param {RoomForWriteDto} [roomForWriteDto] The room name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiRoomPost(roomForWriteDto, options) {
        return (0, exports.RoomApiFp)(this.configuration).apiRoomPost(roomForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RoomApi = RoomApi;
/**
 * ScheduleLessonApi - axios parameter creator
 * @export
 */
const ScheduleLessonApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id
         * @param {number} [scheduleLessonId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdDelete: (id, scheduleLessonId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiScheduleLessonIdDelete', 'id', id);
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (scheduleLessonId !== undefined) {
                localVarQueryParameter['scheduleLessonId'] = scheduleLessonId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiScheduleLessonIdGet', 'id', id);
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing schedule lesson
         * @param {number} id
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdPut: (id, scheduleLessonForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiScheduleLessonIdPut', 'id', id);
            const localVarPath = `/api/ScheduleLesson/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleLessonForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonPost: (scheduleLessonForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/ScheduleLesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleLessonForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ScheduleLessonApiAxiosParamCreator = ScheduleLessonApiAxiosParamCreator;
/**
 * ScheduleLessonApi - functional programming interface
 * @export
 */
const ScheduleLessonApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ScheduleLessonApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id
         * @param {number} [scheduleLessonId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdDelete(id, scheduleLessonId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonIdDelete(id, scheduleLessonId, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing schedule lesson
         * @param {number} id
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonPost(scheduleLessonForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiScheduleLessonPost(scheduleLessonForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ScheduleLessonApiFp = ScheduleLessonApiFp;
/**
 * ScheduleLessonApi - factory interface
 * @export
 */
const ScheduleLessonApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ScheduleLessonApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes all lessons.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonDelete(options) {
            return localVarFp.apiScheduleLessonDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a list of schedule lessons.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonGet(range, sort, filter, options) {
            return localVarFp.apiScheduleLessonGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a schedule lesson by Id.
         * @param {string} id
         * @param {number} [scheduleLessonId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdDelete(id, scheduleLessonId, options) {
            return localVarFp.apiScheduleLessonIdDelete(id, scheduleLessonId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves schedule lesson by Id.
         * @param {number} id Lesson Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdGet(id, options) {
            return localVarFp.apiScheduleLessonIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing schedule lesson
         * @param {number} id
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options) {
            return localVarFp.apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates new schedule lesson
         * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleLessonPost(scheduleLessonForWriteDto, options) {
            return localVarFp.apiScheduleLessonPost(scheduleLessonForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ScheduleLessonApiFactory = ScheduleLessonApiFactory;
/**
 * ScheduleLessonApi - object-oriented interface
 * @export
 * @class ScheduleLessonApi
 * @extends {BaseAPI}
 */
class ScheduleLessonApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes all lessons.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonDelete(options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a list of schedule lessons.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonGet(range, sort, filter, options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a schedule lesson by Id.
     * @param {string} id
     * @param {number} [scheduleLessonId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdDelete(id, scheduleLessonId, options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonIdDelete(id, scheduleLessonId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves schedule lesson by Id.
     * @param {number} id Lesson Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdGet(id, options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing schedule lesson
     * @param {number} id
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonIdPut(id, scheduleLessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates new schedule lesson
     * @param {ScheduleLessonForWriteDto} [scheduleLessonForWriteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleLessonApi
     */
    apiScheduleLessonPost(scheduleLessonForWriteDto, options) {
        return (0, exports.ScheduleLessonApiFp)(this.configuration).apiScheduleLessonPost(scheduleLessonForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ScheduleLessonApi = ScheduleLessonApi;
/**
 * StudentsGroupApi - axios parameter creator
 * @export
 */
const StudentsGroupApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a list of students groups.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdDelete', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdGet', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut: (id, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiStudentsGroupIdPut', 'id', id);
            const localVarPath = `/api/StudentsGroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost: (studentsGroupForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentsGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(studentsGroupForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.StudentsGroupApiAxiosParamCreator = StudentsGroupApiAxiosParamCreator;
/**
 * StudentsGroupApi - functional programming interface
 * @export
 */
const StudentsGroupApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StudentsGroupApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a list of students groups.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupIdPut(id, body, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(studentsGroupForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiStudentsGroupPost(studentsGroupForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.StudentsGroupApiFp = StudentsGroupApiFp;
/**
 * StudentsGroupApi - factory interface
 * @export
 */
const StudentsGroupApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StudentsGroupApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupDelete(options) {
            return localVarFp.apiStudentsGroupDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a list of students groups.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupGet(range, sort, filter, options) {
            return localVarFp.apiStudentsGroupGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a students group
         * @param {number} id The ID of the students group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdDelete(id, options) {
            return localVarFp.apiStudentsGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a students group by its ID
         * @param {number} id Students group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdGet(id, options) {
            return localVarFp.apiStudentsGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing students group
         * @param {number} id The ID of the students group to update
         * @param {string} [body] The updated students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupIdPut(id, body, options) {
            return localVarFp.apiStudentsGroupIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new students group
         * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStudentsGroupPost(studentsGroupForWriteDto, options) {
            return localVarFp.apiStudentsGroupPost(studentsGroupForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StudentsGroupApiFactory = StudentsGroupApiFactory;
/**
 * StudentsGroupApi - object-oriented interface
 * @export
 * @class StudentsGroupApi
 * @extends {BaseAPI}
 */
class StudentsGroupApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupDelete(options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a list of students groups.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupGet(range, sort, filter, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a students group
     * @param {number} id The ID of the students group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdDelete(id, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a students group by its ID
     * @param {number} id Students group ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdGet(id, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing students group
     * @param {number} id The ID of the students group to update
     * @param {string} [body] The updated students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupIdPut(id, body, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new students group
     * @param {StudentsGroupForWriteDto} [studentsGroupForWriteDto] The students group name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsGroupApi
     */
    apiStudentsGroupPost(studentsGroupForWriteDto, options) {
        return (0, exports.StudentsGroupApiFp)(this.configuration).apiStudentsGroupPost(studentsGroupForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StudentsGroupApi = StudentsGroupApi;
/**
 * SubjectApi - axios parameter creator
 * @export
 */
const SubjectApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdDelete', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdGet', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut: (id, subject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiSubjectIdPut', 'id', id);
            const localVarPath = `/api/Subject/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost: (subject, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SubjectApiAxiosParamCreator = SubjectApiAxiosParamCreator;
/**
 * SubjectApi - functional programming interface
 * @export
 */
const SubjectApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SubjectApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id, subject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectIdPut(id, subject, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(subject, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiSubjectPost(subject, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SubjectApiFp = SubjectApiFp;
/**
 * SubjectApi - factory interface
 * @export
 */
const SubjectApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SubjectApiFp)(configuration);
    return {
        /**
         *
         * @summary Retrieves all subjects
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectGet(range, sort, filter, options) {
            return localVarFp.apiSubjectGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a subject
         * @param {number} id The ID of the subject to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdDelete(id, options) {
            return localVarFp.apiSubjectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a subject by its ID
         * @param {number} id Subjects ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdGet(id, options) {
            return localVarFp.apiSubjectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing subject
         * @param {number} id The ID of the subject to update
         * @param {Subject} [subject] The updated subject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectIdPut(id, subject, options) {
            return localVarFp.apiSubjectIdPut(id, subject, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new subject
         * @param {Subject} [subject] The subject to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSubjectPost(subject, options) {
            return localVarFp.apiSubjectPost(subject, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SubjectApiFactory = SubjectApiFactory;
/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
class SubjectApi extends base_1.BaseAPI {
    /**
     *
     * @summary Retrieves all subjects
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectGet(range, sort, filter, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a subject
     * @param {number} id The ID of the subject to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdDelete(id, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a subject by its ID
     * @param {number} id Subjects ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdGet(id, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing subject
     * @param {number} id The ID of the subject to update
     * @param {Subject} [subject] The updated subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectIdPut(id, subject, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectIdPut(id, subject, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new subject
     * @param {Subject} [subject] The subject to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    apiSubjectPost(subject, options) {
        return (0, exports.SubjectApiFp)(this.configuration).apiSubjectPost(subject, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SubjectApi = SubjectApi;
/**
 * TeacherApi - axios parameter creator
 * @export
 */
const TeacherApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a list of teachers.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet: (range, sort, filter, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdDelete', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdGet', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut: (id, teacherForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherIdPut', 'id', id);
            const localVarPath = `/api/Teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost: (teacherForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TeacherApiAxiosParamCreator = TeacherApiAxiosParamCreator;
/**
 * TeacherApi - functional programming interface
 * @export
 */
const TeacherApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TeacherApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a list of teachers.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(range, sort, filter, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherGet(range, sort, filter, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id, teacherForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherIdPut(id, teacherForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherPost(teacherForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TeacherApiFp = TeacherApiFp;
/**
 * TeacherApi - factory interface
 * @export
 */
const TeacherApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TeacherApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDelete(options) {
            return localVarFp.apiTeacherDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a list of teachers.
         * @param {string} [range]
         * @param {string} [sort]
         * @param {string} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherGet(range, sort, filter, options) {
            return localVarFp.apiTeacherGet(range, sort, filter, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a teacher
         * @param {number} id The ID of the teacher to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdDelete(id, options) {
            return localVarFp.apiTeacherIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a teacher by its ID
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdGet(id, options) {
            return localVarFp.apiTeacherIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing teacher
         * @param {number} id The ID of the teacher to update
         * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherIdPut(id, teacherForWriteDto, options) {
            return localVarFp.apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new teacher
         * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherPost(teacherForWriteDto, options) {
            return localVarFp.apiTeacherPost(teacherForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TeacherApiFactory = TeacherApiFactory;
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
class TeacherApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherDelete(options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a list of teachers.
     * @param {string} [range]
     * @param {string} [sort]
     * @param {string} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherGet(range, sort, filter, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherGet(range, sort, filter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a teacher
     * @param {number} id The ID of the teacher to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdDelete(id, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a teacher by its ID
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdGet(id, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing teacher
     * @param {number} id The ID of the teacher to update
     * @param {TeacherForWriteDto} [teacherForWriteDto] The updated teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherIdPut(id, teacherForWriteDto, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherIdPut(id, teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new teacher
     * @param {TeacherForWriteDto} [teacherForWriteDto] The teacher data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    apiTeacherPost(teacherForWriteDto, options) {
        return (0, exports.TeacherApiFp)(this.configuration).apiTeacherPost(teacherForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeacherApi = TeacherApi;
/**
 * TeacherDepartmentApi - axios parameter creator
 * @export
 */
const TeacherDepartmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentDelete: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherDepartmentIdDelete', 'id', id);
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherDepartmentIdGet', 'id', id);
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdPut: (id, teacherDepartmentForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('apiTeacherDepartmentIdPut', 'id', id);
            const localVarPath = `/api/TeacherDepartment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherDepartmentForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentPost: (teacherDepartmentForWriteDto, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherDepartment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(teacherDepartmentForWriteDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TeacherDepartmentApiAxiosParamCreator = TeacherDepartmentApiAxiosParamCreator;
/**
 * TeacherDepartmentApi - functional programming interface
 * @export
 */
const TeacherDepartmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.TeacherDepartmentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentDelete(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentDelete(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentGet(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentIdDelete(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentIdGet(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TeacherDepartmentApiFp = TeacherDepartmentApiFp;
/**
 * TeacherDepartmentApi - factory interface
 * @export
 */
const TeacherDepartmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.TeacherDepartmentApiFp)(configuration);
    return {
        /**
         *
         * @summary Deletes all department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentDelete(options) {
            return localVarFp.apiTeacherDepartmentDelete(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves all departments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentGet(options) {
            return localVarFp.apiTeacherDepartmentGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a department
         * @param {number} id The ID of the department to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdDelete(id, options) {
            return localVarFp.apiTeacherDepartmentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a department by its ID
         * @param {number} id Department ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdGet(id, options) {
            return localVarFp.apiTeacherDepartmentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Updates an existing department
         * @param {number} id The ID of the department to update
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options) {
            return localVarFp.apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new department
         * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options) {
            return localVarFp.apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TeacherDepartmentApiFactory = TeacherDepartmentApiFactory;
/**
 * TeacherDepartmentApi - object-oriented interface
 * @export
 * @class TeacherDepartmentApi
 * @extends {BaseAPI}
 */
class TeacherDepartmentApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deletes all department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentDelete(options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentDelete(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves all departments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentGet(options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deletes a department
     * @param {number} id The ID of the department to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdDelete(id, options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves a department by its ID
     * @param {number} id Department ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdGet(id, options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Updates an existing department
     * @param {number} id The ID of the department to update
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The updated department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentIdPut(id, teacherDepartmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Creates a new department
     * @param {TeacherDepartmentForWriteDto} [teacherDepartmentForWriteDto] The department data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherDepartmentApi
     */
    apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options) {
        return (0, exports.TeacherDepartmentApiFp)(this.configuration).apiTeacherDepartmentPost(teacherDepartmentForWriteDto, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TeacherDepartmentApi = TeacherDepartmentApi;
